{"ast":null,"code":"'use strict';\n\nimport utils from './../utils.js';\nimport settle from './../core/settle.js';\nimport buildFullPath from '../core/buildFullPath.js';\nimport buildURL from './../helpers/buildURL.js';\nimport proxyFromEnv from 'proxy-from-env';\nimport http from 'http';\nimport https from 'https';\nimport util from 'util';\nimport followRedirects from 'follow-redirects';\nimport zlib from 'zlib';\nimport { VERSION } from '../env/data.js';\nimport transitionalDefaults from '../defaults/transitional.js';\nimport AxiosError from '../core/AxiosError.js';\nimport CanceledError from '../cancel/CanceledError.js';\nimport platform from '../platform/index.js';\nimport fromDataURI from '../helpers/fromDataURI.js';\nimport stream from 'stream';\nimport AxiosHeaders from '../core/AxiosHeaders.js';\nimport AxiosTransformStream from '../helpers/AxiosTransformStream.js';\nimport { EventEmitter } from 'events';\nimport formDataToStream from \"../helpers/formDataToStream.js\";\nimport readBlob from \"../helpers/readBlob.js\";\nimport ZlibHeaderTransformStream from '../helpers/ZlibHeaderTransformStream.js';\nimport callbackify from \"../helpers/callbackify.js\";\nimport { progressEventReducer, progressEventDecorator, asyncDecorator } from \"../helpers/progressEventReducer.js\";\nconst zlibOptions = {\n  flush: zlib.constants.Z_SYNC_FLUSH,\n  finishFlush: zlib.constants.Z_SYNC_FLUSH\n};\nconst brotliOptions = {\n  flush: zlib.constants.BROTLI_OPERATION_FLUSH,\n  finishFlush: zlib.constants.BROTLI_OPERATION_FLUSH\n};\nconst isBrotliSupported = utils.isFunction(zlib.createBrotliDecompress);\nconst {\n  http: httpFollow,\n  https: httpsFollow\n} = followRedirects;\nconst isHttps = /https:?/;\nconst supportedProtocols = platform.protocols.map(protocol => {\n  return protocol + ':';\n});\nconst flushOnFinish = (stream, [throttled, flush]) => {\n  stream.on('end', flush).on('error', flush);\n  return throttled;\n};\n\n/**\n * If the proxy or config beforeRedirects functions are defined, call them with the options\n * object.\n *\n * @param {Object<string, any>} options - The options object that was passed to the request.\n *\n * @returns {Object<string, any>}\n */\nfunction dispatchBeforeRedirect(options, responseDetails) {\n  if (options.beforeRedirects.proxy) {\n    options.beforeRedirects.proxy(options);\n  }\n  if (options.beforeRedirects.config) {\n    options.beforeRedirects.config(options, responseDetails);\n  }\n}\n\n/**\n * If the proxy or config afterRedirects functions are defined, call them with the options\n *\n * @param {http.ClientRequestArgs} options\n * @param {AxiosProxyConfig} configProxy configuration from Axios options object\n * @param {string} location\n *\n * @returns {http.ClientRequestArgs}\n */\nfunction setProxy(options, configProxy, location) {\n  let proxy = configProxy;\n  if (!proxy && proxy !== false) {\n    const proxyUrl = proxyFromEnv.getProxyForUrl(location);\n    if (proxyUrl) {\n      proxy = new URL(proxyUrl);\n    }\n  }\n  if (proxy) {\n    // Basic proxy authorization\n    if (proxy.username) {\n      proxy.auth = (proxy.username || '') + ':' + (proxy.password || '');\n    }\n    if (proxy.auth) {\n      // Support proxy auth object form\n      if (proxy.auth.username || proxy.auth.password) {\n        proxy.auth = (proxy.auth.username || '') + ':' + (proxy.auth.password || '');\n      }\n      const base64 = Buffer.from(proxy.auth, 'utf8').toString('base64');\n      options.headers['Proxy-Authorization'] = 'Basic ' + base64;\n    }\n    options.headers.host = options.hostname + (options.port ? ':' + options.port : '');\n    const proxyHost = proxy.hostname || proxy.host;\n    options.hostname = proxyHost;\n    // Replace 'host' since options is not a URL object\n    options.host = proxyHost;\n    options.port = proxy.port;\n    options.path = location;\n    if (proxy.protocol) {\n      options.protocol = proxy.protocol.includes(':') ? proxy.protocol : `${proxy.protocol}:`;\n    }\n  }\n  options.beforeRedirects.proxy = function beforeRedirect(redirectOptions) {\n    // Configure proxy for redirected request, passing the original config proxy to apply\n    // the exact same logic as if the redirected request was performed by axios directly.\n    setProxy(redirectOptions, configProxy, redirectOptions.href);\n  };\n}\nconst isHttpAdapterSupported = typeof process !== 'undefined' && utils.kindOf(process) === 'process';\n\n// temporary hotfix\n\nconst wrapAsync = asyncExecutor => {\n  return new Promise((resolve, reject) => {\n    let onDone;\n    let isDone;\n    const done = (value, isRejected) => {\n      if (isDone) return;\n      isDone = true;\n      onDone && onDone(value, isRejected);\n    };\n    const _resolve = value => {\n      done(value);\n      resolve(value);\n    };\n    const _reject = reason => {\n      done(reason, true);\n      reject(reason);\n    };\n    asyncExecutor(_resolve, _reject, onDoneHandler => onDone = onDoneHandler).catch(_reject);\n  });\n};\nconst resolveFamily = ({\n  address,\n  family\n}) => {\n  if (!utils.isString(address)) {\n    throw TypeError('address must be a string');\n  }\n  return {\n    address,\n    family: family || (address.indexOf('.') < 0 ? 6 : 4)\n  };\n};\nconst buildAddressEntry = (address, family) => resolveFamily(utils.isObject(address) ? address : {\n  address,\n  family\n});\n\n/*eslint consistent-return:0*/\nexport default isHttpAdapterSupported && function httpAdapter(config) {\n  return wrapAsync(async function dispatchHttpRequest(resolve, reject, onDone) {\n    let {\n      data,\n      lookup,\n      family\n    } = config;\n    const {\n      responseType,\n      responseEncoding\n    } = config;\n    const method = config.method.toUpperCase();\n    let isDone;\n    let rejected = false;\n    let req;\n    if (lookup) {\n      const _lookup = callbackify(lookup, value => utils.isArray(value) ? value : [value]);\n      // hotfix to support opt.all option which is required for node 20.x\n      lookup = (hostname, opt, cb) => {\n        _lookup(hostname, opt, (err, arg0, arg1) => {\n          if (err) {\n            return cb(err);\n          }\n          const addresses = utils.isArray(arg0) ? arg0.map(addr => buildAddressEntry(addr)) : [buildAddressEntry(arg0, arg1)];\n          opt.all ? cb(err, addresses) : cb(err, addresses[0].address, addresses[0].family);\n        });\n      };\n    }\n\n    // temporary internal emitter until the AxiosRequest class will be implemented\n    const emitter = new EventEmitter();\n    const onFinished = () => {\n      if (config.cancelToken) {\n        config.cancelToken.unsubscribe(abort);\n      }\n      if (config.signal) {\n        config.signal.removeEventListener('abort', abort);\n      }\n      emitter.removeAllListeners();\n    };\n    onDone((value, isRejected) => {\n      isDone = true;\n      if (isRejected) {\n        rejected = true;\n        onFinished();\n      }\n    });\n    function abort(reason) {\n      emitter.emit('abort', !reason || reason.type ? new CanceledError(null, config, req) : reason);\n    }\n    emitter.once('abort', reject);\n    if (config.cancelToken || config.signal) {\n      config.cancelToken && config.cancelToken.subscribe(abort);\n      if (config.signal) {\n        config.signal.aborted ? abort() : config.signal.addEventListener('abort', abort);\n      }\n    }\n\n    // Parse url\n    const fullPath = buildFullPath(config.baseURL, config.url);\n    const parsed = new URL(fullPath, platform.hasBrowserEnv ? platform.origin : undefined);\n    const protocol = parsed.protocol || supportedProtocols[0];\n    if (protocol === 'data:') {\n      let convertedData;\n      if (method !== 'GET') {\n        return settle(resolve, reject, {\n          status: 405,\n          statusText: 'method not allowed',\n          headers: {},\n          config\n        });\n      }\n      try {\n        convertedData = fromDataURI(config.url, responseType === 'blob', {\n          Blob: config.env && config.env.Blob\n        });\n      } catch (err) {\n        throw AxiosError.from(err, AxiosError.ERR_BAD_REQUEST, config);\n      }\n      if (responseType === 'text') {\n        convertedData = convertedData.toString(responseEncoding);\n        if (!responseEncoding || responseEncoding === 'utf8') {\n          convertedData = utils.stripBOM(convertedData);\n        }\n      } else if (responseType === 'stream') {\n        convertedData = stream.Readable.from(convertedData);\n      }\n      return settle(resolve, reject, {\n        data: convertedData,\n        status: 200,\n        statusText: 'OK',\n        headers: new AxiosHeaders(),\n        config\n      });\n    }\n    if (supportedProtocols.indexOf(protocol) === -1) {\n      return reject(new AxiosError('Unsupported protocol ' + protocol, AxiosError.ERR_BAD_REQUEST, config));\n    }\n    const headers = AxiosHeaders.from(config.headers).normalize();\n\n    // Set User-Agent (required by some servers)\n    // See https://github.com/axios/axios/issues/69\n    // User-Agent is specified; handle case where no UA header is desired\n    // Only set header if it hasn't been set in config\n    headers.set('User-Agent', 'axios/' + VERSION, false);\n    const {\n      onUploadProgress,\n      onDownloadProgress\n    } = config;\n    const maxRate = config.maxRate;\n    let maxUploadRate = undefined;\n    let maxDownloadRate = undefined;\n\n    // support for spec compliant FormData objects\n    if (utils.isSpecCompliantForm(data)) {\n      const userBoundary = headers.getContentType(/boundary=([-_\\w\\d]{10,70})/i);\n      data = formDataToStream(data, formHeaders => {\n        headers.set(formHeaders);\n      }, {\n        tag: `axios-${VERSION}-boundary`,\n        boundary: userBoundary && userBoundary[1] || undefined\n      });\n      // support for https://www.npmjs.com/package/form-data api\n    } else if (utils.isFormData(data) && utils.isFunction(data.getHeaders)) {\n      headers.set(data.getHeaders());\n      if (!headers.hasContentLength()) {\n        try {\n          const knownLength = await util.promisify(data.getLength).call(data);\n          Number.isFinite(knownLength) && knownLength >= 0 && headers.setContentLength(knownLength);\n          /*eslint no-empty:0*/\n        } catch (e) {}\n      }\n    } else if (utils.isBlob(data) || utils.isFile(data)) {\n      data.size && headers.setContentType(data.type || 'application/octet-stream');\n      headers.setContentLength(data.size || 0);\n      data = stream.Readable.from(readBlob(data));\n    } else if (data && !utils.isStream(data)) {\n      if (Buffer.isBuffer(data)) {\n        // Nothing to do...\n      } else if (utils.isArrayBuffer(data)) {\n        data = Buffer.from(new Uint8Array(data));\n      } else if (utils.isString(data)) {\n        data = Buffer.from(data, 'utf-8');\n      } else {\n        return reject(new AxiosError('Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream', AxiosError.ERR_BAD_REQUEST, config));\n      }\n\n      // Add Content-Length header if data exists\n      headers.setContentLength(data.length, false);\n      if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {\n        return reject(new AxiosError('Request body larger than maxBodyLength limit', AxiosError.ERR_BAD_REQUEST, config));\n      }\n    }\n    const contentLength = utils.toFiniteNumber(headers.getContentLength());\n    if (utils.isArray(maxRate)) {\n      maxUploadRate = maxRate[0];\n      maxDownloadRate = maxRate[1];\n    } else {\n      maxUploadRate = maxDownloadRate = maxRate;\n    }\n    if (data && (onUploadProgress || maxUploadRate)) {\n      if (!utils.isStream(data)) {\n        data = stream.Readable.from(data, {\n          objectMode: false\n        });\n      }\n      data = stream.pipeline([data, new AxiosTransformStream({\n        maxRate: utils.toFiniteNumber(maxUploadRate)\n      })], utils.noop);\n      onUploadProgress && data.on('progress', flushOnFinish(data, progressEventDecorator(contentLength, progressEventReducer(asyncDecorator(onUploadProgress), false, 3))));\n    }\n\n    // HTTP basic authentication\n    let auth = undefined;\n    if (config.auth) {\n      const username = config.auth.username || '';\n      const password = config.auth.password || '';\n      auth = username + ':' + password;\n    }\n    if (!auth && parsed.username) {\n      const urlUsername = parsed.username;\n      const urlPassword = parsed.password;\n      auth = urlUsername + ':' + urlPassword;\n    }\n    auth && headers.delete('authorization');\n    let path;\n    try {\n      path = buildURL(parsed.pathname + parsed.search, config.params, config.paramsSerializer).replace(/^\\?/, '');\n    } catch (err) {\n      const customErr = new Error(err.message);\n      customErr.config = config;\n      customErr.url = config.url;\n      customErr.exists = true;\n      return reject(customErr);\n    }\n    headers.set('Accept-Encoding', 'gzip, compress, deflate' + (isBrotliSupported ? ', br' : ''), false);\n    const options = {\n      path,\n      method: method,\n      headers: headers.toJSON(),\n      agents: {\n        http: config.httpAgent,\n        https: config.httpsAgent\n      },\n      auth,\n      protocol,\n      family,\n      beforeRedirect: dispatchBeforeRedirect,\n      beforeRedirects: {}\n    };\n\n    // cacheable-lookup integration hotfix\n    !utils.isUndefined(lookup) && (options.lookup = lookup);\n    if (config.socketPath) {\n      options.socketPath = config.socketPath;\n    } else {\n      options.hostname = parsed.hostname.startsWith(\"[\") ? parsed.hostname.slice(1, -1) : parsed.hostname;\n      options.port = parsed.port;\n      setProxy(options, config.proxy, protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path);\n    }\n    let transport;\n    const isHttpsRequest = isHttps.test(options.protocol);\n    options.agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;\n    if (config.transport) {\n      transport = config.transport;\n    } else if (config.maxRedirects === 0) {\n      transport = isHttpsRequest ? https : http;\n    } else {\n      if (config.maxRedirects) {\n        options.maxRedirects = config.maxRedirects;\n      }\n      if (config.beforeRedirect) {\n        options.beforeRedirects.config = config.beforeRedirect;\n      }\n      transport = isHttpsRequest ? httpsFollow : httpFollow;\n    }\n    if (config.maxBodyLength > -1) {\n      options.maxBodyLength = config.maxBodyLength;\n    } else {\n      // follow-redirects does not skip comparison, so it should always succeed for axios -1 unlimited\n      options.maxBodyLength = Infinity;\n    }\n    if (config.insecureHTTPParser) {\n      options.insecureHTTPParser = config.insecureHTTPParser;\n    }\n\n    // Create the request\n    req = transport.request(options, function handleResponse(res) {\n      if (req.destroyed) return;\n      const streams = [res];\n      const responseLength = +res.headers['content-length'];\n      if (onDownloadProgress || maxDownloadRate) {\n        const transformStream = new AxiosTransformStream({\n          maxRate: utils.toFiniteNumber(maxDownloadRate)\n        });\n        onDownloadProgress && transformStream.on('progress', flushOnFinish(transformStream, progressEventDecorator(responseLength, progressEventReducer(asyncDecorator(onDownloadProgress), true, 3))));\n        streams.push(transformStream);\n      }\n\n      // decompress the response body transparently if required\n      let responseStream = res;\n\n      // return the last request in case of redirects\n      const lastRequest = res.req || req;\n\n      // if decompress disabled we should not decompress\n      if (config.decompress !== false && res.headers['content-encoding']) {\n        // if no content, but headers still say that it is encoded,\n        // remove the header not confuse downstream operations\n        if (method === 'HEAD' || res.statusCode === 204) {\n          delete res.headers['content-encoding'];\n        }\n        switch ((res.headers['content-encoding'] || '').toLowerCase()) {\n          /*eslint default-case:0*/\n          case 'gzip':\n          case 'x-gzip':\n          case 'compress':\n          case 'x-compress':\n            // add the unzipper to the body stream processing pipeline\n            streams.push(zlib.createUnzip(zlibOptions));\n\n            // remove the content-encoding in order to not confuse downstream operations\n            delete res.headers['content-encoding'];\n            break;\n          case 'deflate':\n            streams.push(new ZlibHeaderTransformStream());\n\n            // add the unzipper to the body stream processing pipeline\n            streams.push(zlib.createUnzip(zlibOptions));\n\n            // remove the content-encoding in order to not confuse downstream operations\n            delete res.headers['content-encoding'];\n            break;\n          case 'br':\n            if (isBrotliSupported) {\n              streams.push(zlib.createBrotliDecompress(brotliOptions));\n              delete res.headers['content-encoding'];\n            }\n        }\n      }\n      responseStream = streams.length > 1 ? stream.pipeline(streams, utils.noop) : streams[0];\n      const offListeners = stream.finished(responseStream, () => {\n        offListeners();\n        onFinished();\n      });\n      const response = {\n        status: res.statusCode,\n        statusText: res.statusMessage,\n        headers: new AxiosHeaders(res.headers),\n        config,\n        request: lastRequest\n      };\n      if (responseType === 'stream') {\n        response.data = responseStream;\n        settle(resolve, reject, response);\n      } else {\n        const responseBuffer = [];\n        let totalResponseBytes = 0;\n        responseStream.on('data', function handleStreamData(chunk) {\n          responseBuffer.push(chunk);\n          totalResponseBytes += chunk.length;\n\n          // make sure the content length is not over the maxContentLength if specified\n          if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {\n            // stream.destroy() emit aborted event before calling reject() on Node.js v16\n            rejected = true;\n            responseStream.destroy();\n            reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n          }\n        });\n        responseStream.on('aborted', function handlerStreamAborted() {\n          if (rejected) {\n            return;\n          }\n          const err = new AxiosError('stream has been aborted', AxiosError.ERR_BAD_RESPONSE, config, lastRequest);\n          responseStream.destroy(err);\n          reject(err);\n        });\n        responseStream.on('error', function handleStreamError(err) {\n          if (req.destroyed) return;\n          reject(AxiosError.from(err, null, config, lastRequest));\n        });\n        responseStream.on('end', function handleStreamEnd() {\n          try {\n            let responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);\n            if (responseType !== 'arraybuffer') {\n              responseData = responseData.toString(responseEncoding);\n              if (!responseEncoding || responseEncoding === 'utf8') {\n                responseData = utils.stripBOM(responseData);\n              }\n            }\n            response.data = responseData;\n          } catch (err) {\n            return reject(AxiosError.from(err, null, config, response.request, response));\n          }\n          settle(resolve, reject, response);\n        });\n      }\n      emitter.once('abort', err => {\n        if (!responseStream.destroyed) {\n          responseStream.emit('error', err);\n          responseStream.destroy();\n        }\n      });\n    });\n    emitter.once('abort', err => {\n      reject(err);\n      req.destroy(err);\n    });\n\n    // Handle errors\n    req.on('error', function handleRequestError(err) {\n      // @todo remove\n      // if (req.aborted && err.code !== AxiosError.ERR_FR_TOO_MANY_REDIRECTS) return;\n      reject(AxiosError.from(err, null, config, req));\n    });\n\n    // set tcp keep alive to prevent drop connection by peer\n    req.on('socket', function handleRequestSocket(socket) {\n      // default interval of sending ack packet is 1 minute\n      socket.setKeepAlive(true, 1000 * 60);\n    });\n\n    // Handle request timeout\n    if (config.timeout) {\n      // This is forcing a int timeout to avoid problems if the `req` interface doesn't handle other types.\n      const timeout = parseInt(config.timeout, 10);\n      if (Number.isNaN(timeout)) {\n        reject(new AxiosError('error trying to parse `config.timeout` to int', AxiosError.ERR_BAD_OPTION_VALUE, config, req));\n        return;\n      }\n\n      // Sometime, the response will be very slow, and does not respond, the connect event will be block by event loop system.\n      // And timer callback will be fired, and abort() will be invoked before connection, then get \"socket hang up\" and code ECONNRESET.\n      // At this time, if we have a large number of request, nodejs will hang up some socket on background. and the number will up and up.\n      // And then these socket which be hang up will devouring CPU little by little.\n      // ClientRequest.setTimeout will be fired on the specify milliseconds, and can make sure that abort() will be fired after connect.\n      req.setTimeout(timeout, function handleRequestTimeout() {\n        if (isDone) return;\n        let timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';\n        const transitional = config.transitional || transitionalDefaults;\n        if (config.timeoutErrorMessage) {\n          timeoutErrorMessage = config.timeoutErrorMessage;\n        }\n        reject(new AxiosError(timeoutErrorMessage, transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED, config, req));\n        abort();\n      });\n    }\n\n    // Send the request\n    if (utils.isStream(data)) {\n      let ended = false;\n      let errored = false;\n      data.on('end', () => {\n        ended = true;\n      });\n      data.once('error', err => {\n        errored = true;\n        req.destroy(err);\n      });\n      data.on('close', () => {\n        if (!ended && !errored) {\n          abort(new CanceledError('Request stream has been aborted', config, req));\n        }\n      });\n      data.pipe(req);\n    } else {\n      req.end(data);\n    }\n  });\n};\nexport const __setProxy = setProxy;","map":{"version":3,"names":["utils","settle","buildFullPath","buildURL","proxyFromEnv","http","https","util","followRedirects","zlib","VERSION","transitionalDefaults","AxiosError","CanceledError","platform","fromDataURI","stream","AxiosHeaders","AxiosTransformStream","EventEmitter","formDataToStream","readBlob","ZlibHeaderTransformStream","callbackify","progressEventReducer","progressEventDecorator","asyncDecorator","zlibOptions","flush","constants","Z_SYNC_FLUSH","finishFlush","brotliOptions","BROTLI_OPERATION_FLUSH","isBrotliSupported","isFunction","createBrotliDecompress","httpFollow","httpsFollow","isHttps","supportedProtocols","protocols","map","protocol","flushOnFinish","throttled","on","dispatchBeforeRedirect","options","responseDetails","beforeRedirects","proxy","config","setProxy","configProxy","location","proxyUrl","getProxyForUrl","URL","username","auth","password","base64","Buffer","from","toString","headers","host","hostname","port","proxyHost","path","includes","beforeRedirect","redirectOptions","href","isHttpAdapterSupported","process","kindOf","wrapAsync","asyncExecutor","Promise","resolve","reject","onDone","isDone","done","value","isRejected","_resolve","_reject","reason","onDoneHandler","catch","resolveFamily","address","family","isString","TypeError","indexOf","buildAddressEntry","isObject","httpAdapter","dispatchHttpRequest","data","lookup","responseType","responseEncoding","method","toUpperCase","rejected","req","_lookup","isArray","opt","cb","err","arg0","arg1","addresses","addr","all","emitter","onFinished","cancelToken","unsubscribe","abort","signal","removeEventListener","removeAllListeners","emit","type","once","subscribe","aborted","addEventListener","fullPath","baseURL","url","parsed","hasBrowserEnv","origin","undefined","convertedData","status","statusText","Blob","env","ERR_BAD_REQUEST","stripBOM","Readable","normalize","set","onUploadProgress","onDownloadProgress","maxRate","maxUploadRate","maxDownloadRate","isSpecCompliantForm","userBoundary","getContentType","formHeaders","tag","boundary","isFormData","getHeaders","hasContentLength","knownLength","promisify","getLength","call","Number","isFinite","setContentLength","e","isBlob","isFile","size","setContentType","isStream","isBuffer","isArrayBuffer","Uint8Array","length","maxBodyLength","contentLength","toFiniteNumber","getContentLength","objectMode","pipeline","noop","urlUsername","urlPassword","delete","pathname","search","params","paramsSerializer","replace","customErr","Error","message","exists","toJSON","agents","httpAgent","httpsAgent","isUndefined","socketPath","startsWith","slice","transport","isHttpsRequest","test","agent","maxRedirects","Infinity","insecureHTTPParser","request","handleResponse","res","destroyed","streams","responseLength","transformStream","push","responseStream","lastRequest","decompress","statusCode","toLowerCase","createUnzip","offListeners","finished","response","statusMessage","responseBuffer","totalResponseBytes","handleStreamData","chunk","maxContentLength","destroy","ERR_BAD_RESPONSE","handlerStreamAborted","handleStreamError","handleStreamEnd","responseData","concat","handleRequestError","handleRequestSocket","socket","setKeepAlive","timeout","parseInt","isNaN","ERR_BAD_OPTION_VALUE","setTimeout","handleRequestTimeout","timeoutErrorMessage","transitional","clarifyTimeoutError","ETIMEDOUT","ECONNABORTED","ended","errored","pipe","end","__setProxy"],"sources":["/Users/ironman/Desktop/My/my-app/node_modules/axios/lib/adapters/http.js"],"sourcesContent":["'use strict';\n\nimport utils from './../utils.js';\nimport settle from './../core/settle.js';\nimport buildFullPath from '../core/buildFullPath.js';\nimport buildURL from './../helpers/buildURL.js';\nimport proxyFromEnv from 'proxy-from-env';\nimport http from 'http';\nimport https from 'https';\nimport util from 'util';\nimport followRedirects from 'follow-redirects';\nimport zlib from 'zlib';\nimport {VERSION} from '../env/data.js';\nimport transitionalDefaults from '../defaults/transitional.js';\nimport AxiosError from '../core/AxiosError.js';\nimport CanceledError from '../cancel/CanceledError.js';\nimport platform from '../platform/index.js';\nimport fromDataURI from '../helpers/fromDataURI.js';\nimport stream from 'stream';\nimport AxiosHeaders from '../core/AxiosHeaders.js';\nimport AxiosTransformStream from '../helpers/AxiosTransformStream.js';\nimport {EventEmitter} from 'events';\nimport formDataToStream from \"../helpers/formDataToStream.js\";\nimport readBlob from \"../helpers/readBlob.js\";\nimport ZlibHeaderTransformStream from '../helpers/ZlibHeaderTransformStream.js';\nimport callbackify from \"../helpers/callbackify.js\";\nimport {progressEventReducer, progressEventDecorator, asyncDecorator} from \"../helpers/progressEventReducer.js\";\n\nconst zlibOptions = {\n  flush: zlib.constants.Z_SYNC_FLUSH,\n  finishFlush: zlib.constants.Z_SYNC_FLUSH\n};\n\nconst brotliOptions = {\n  flush: zlib.constants.BROTLI_OPERATION_FLUSH,\n  finishFlush: zlib.constants.BROTLI_OPERATION_FLUSH\n}\n\nconst isBrotliSupported = utils.isFunction(zlib.createBrotliDecompress);\n\nconst {http: httpFollow, https: httpsFollow} = followRedirects;\n\nconst isHttps = /https:?/;\n\nconst supportedProtocols = platform.protocols.map(protocol => {\n  return protocol + ':';\n});\n\nconst flushOnFinish = (stream, [throttled, flush]) => {\n  stream\n    .on('end', flush)\n    .on('error', flush);\n\n  return throttled;\n}\n\n/**\n * If the proxy or config beforeRedirects functions are defined, call them with the options\n * object.\n *\n * @param {Object<string, any>} options - The options object that was passed to the request.\n *\n * @returns {Object<string, any>}\n */\nfunction dispatchBeforeRedirect(options, responseDetails) {\n  if (options.beforeRedirects.proxy) {\n    options.beforeRedirects.proxy(options);\n  }\n  if (options.beforeRedirects.config) {\n    options.beforeRedirects.config(options, responseDetails);\n  }\n}\n\n/**\n * If the proxy or config afterRedirects functions are defined, call them with the options\n *\n * @param {http.ClientRequestArgs} options\n * @param {AxiosProxyConfig} configProxy configuration from Axios options object\n * @param {string} location\n *\n * @returns {http.ClientRequestArgs}\n */\nfunction setProxy(options, configProxy, location) {\n  let proxy = configProxy;\n  if (!proxy && proxy !== false) {\n    const proxyUrl = proxyFromEnv.getProxyForUrl(location);\n    if (proxyUrl) {\n      proxy = new URL(proxyUrl);\n    }\n  }\n  if (proxy) {\n    // Basic proxy authorization\n    if (proxy.username) {\n      proxy.auth = (proxy.username || '') + ':' + (proxy.password || '');\n    }\n\n    if (proxy.auth) {\n      // Support proxy auth object form\n      if (proxy.auth.username || proxy.auth.password) {\n        proxy.auth = (proxy.auth.username || '') + ':' + (proxy.auth.password || '');\n      }\n      const base64 = Buffer\n        .from(proxy.auth, 'utf8')\n        .toString('base64');\n      options.headers['Proxy-Authorization'] = 'Basic ' + base64;\n    }\n\n    options.headers.host = options.hostname + (options.port ? ':' + options.port : '');\n    const proxyHost = proxy.hostname || proxy.host;\n    options.hostname = proxyHost;\n    // Replace 'host' since options is not a URL object\n    options.host = proxyHost;\n    options.port = proxy.port;\n    options.path = location;\n    if (proxy.protocol) {\n      options.protocol = proxy.protocol.includes(':') ? proxy.protocol : `${proxy.protocol}:`;\n    }\n  }\n\n  options.beforeRedirects.proxy = function beforeRedirect(redirectOptions) {\n    // Configure proxy for redirected request, passing the original config proxy to apply\n    // the exact same logic as if the redirected request was performed by axios directly.\n    setProxy(redirectOptions, configProxy, redirectOptions.href);\n  };\n}\n\nconst isHttpAdapterSupported = typeof process !== 'undefined' && utils.kindOf(process) === 'process';\n\n// temporary hotfix\n\nconst wrapAsync = (asyncExecutor) => {\n  return new Promise((resolve, reject) => {\n    let onDone;\n    let isDone;\n\n    const done = (value, isRejected) => {\n      if (isDone) return;\n      isDone = true;\n      onDone && onDone(value, isRejected);\n    }\n\n    const _resolve = (value) => {\n      done(value);\n      resolve(value);\n    };\n\n    const _reject = (reason) => {\n      done(reason, true);\n      reject(reason);\n    }\n\n    asyncExecutor(_resolve, _reject, (onDoneHandler) => (onDone = onDoneHandler)).catch(_reject);\n  })\n};\n\nconst resolveFamily = ({address, family}) => {\n  if (!utils.isString(address)) {\n    throw TypeError('address must be a string');\n  }\n  return ({\n    address,\n    family: family || (address.indexOf('.') < 0 ? 6 : 4)\n  });\n}\n\nconst buildAddressEntry = (address, family) => resolveFamily(utils.isObject(address) ? address : {address, family});\n\n/*eslint consistent-return:0*/\nexport default isHttpAdapterSupported && function httpAdapter(config) {\n  return wrapAsync(async function dispatchHttpRequest(resolve, reject, onDone) {\n    let {data, lookup, family} = config;\n    const {responseType, responseEncoding} = config;\n    const method = config.method.toUpperCase();\n    let isDone;\n    let rejected = false;\n    let req;\n\n    if (lookup) {\n      const _lookup = callbackify(lookup, (value) => utils.isArray(value) ? value : [value]);\n      // hotfix to support opt.all option which is required for node 20.x\n      lookup = (hostname, opt, cb) => {\n        _lookup(hostname, opt, (err, arg0, arg1) => {\n          if (err) {\n            return cb(err);\n          }\n\n          const addresses = utils.isArray(arg0) ? arg0.map(addr => buildAddressEntry(addr)) : [buildAddressEntry(arg0, arg1)];\n\n          opt.all ? cb(err, addresses) : cb(err, addresses[0].address, addresses[0].family);\n        });\n      }\n    }\n\n    // temporary internal emitter until the AxiosRequest class will be implemented\n    const emitter = new EventEmitter();\n\n    const onFinished = () => {\n      if (config.cancelToken) {\n        config.cancelToken.unsubscribe(abort);\n      }\n\n      if (config.signal) {\n        config.signal.removeEventListener('abort', abort);\n      }\n\n      emitter.removeAllListeners();\n    }\n\n    onDone((value, isRejected) => {\n      isDone = true;\n      if (isRejected) {\n        rejected = true;\n        onFinished();\n      }\n    });\n\n    function abort(reason) {\n      emitter.emit('abort', !reason || reason.type ? new CanceledError(null, config, req) : reason);\n    }\n\n    emitter.once('abort', reject);\n\n    if (config.cancelToken || config.signal) {\n      config.cancelToken && config.cancelToken.subscribe(abort);\n      if (config.signal) {\n        config.signal.aborted ? abort() : config.signal.addEventListener('abort', abort);\n      }\n    }\n\n    // Parse url\n    const fullPath = buildFullPath(config.baseURL, config.url);\n    const parsed = new URL(fullPath, platform.hasBrowserEnv ? platform.origin : undefined);\n    const protocol = parsed.protocol || supportedProtocols[0];\n\n    if (protocol === 'data:') {\n      let convertedData;\n\n      if (method !== 'GET') {\n        return settle(resolve, reject, {\n          status: 405,\n          statusText: 'method not allowed',\n          headers: {},\n          config\n        });\n      }\n\n      try {\n        convertedData = fromDataURI(config.url, responseType === 'blob', {\n          Blob: config.env && config.env.Blob\n        });\n      } catch (err) {\n        throw AxiosError.from(err, AxiosError.ERR_BAD_REQUEST, config);\n      }\n\n      if (responseType === 'text') {\n        convertedData = convertedData.toString(responseEncoding);\n\n        if (!responseEncoding || responseEncoding === 'utf8') {\n          convertedData = utils.stripBOM(convertedData);\n        }\n      } else if (responseType === 'stream') {\n        convertedData = stream.Readable.from(convertedData);\n      }\n\n      return settle(resolve, reject, {\n        data: convertedData,\n        status: 200,\n        statusText: 'OK',\n        headers: new AxiosHeaders(),\n        config\n      });\n    }\n\n    if (supportedProtocols.indexOf(protocol) === -1) {\n      return reject(new AxiosError(\n        'Unsupported protocol ' + protocol,\n        AxiosError.ERR_BAD_REQUEST,\n        config\n      ));\n    }\n\n    const headers = AxiosHeaders.from(config.headers).normalize();\n\n    // Set User-Agent (required by some servers)\n    // See https://github.com/axios/axios/issues/69\n    // User-Agent is specified; handle case where no UA header is desired\n    // Only set header if it hasn't been set in config\n    headers.set('User-Agent', 'axios/' + VERSION, false);\n\n    const {onUploadProgress, onDownloadProgress} = config;\n    const maxRate = config.maxRate;\n    let maxUploadRate = undefined;\n    let maxDownloadRate = undefined;\n\n    // support for spec compliant FormData objects\n    if (utils.isSpecCompliantForm(data)) {\n      const userBoundary = headers.getContentType(/boundary=([-_\\w\\d]{10,70})/i);\n\n      data = formDataToStream(data, (formHeaders) => {\n        headers.set(formHeaders);\n      }, {\n        tag: `axios-${VERSION}-boundary`,\n        boundary: userBoundary && userBoundary[1] || undefined\n      });\n      // support for https://www.npmjs.com/package/form-data api\n    } else if (utils.isFormData(data) && utils.isFunction(data.getHeaders)) {\n      headers.set(data.getHeaders());\n\n      if (!headers.hasContentLength()) {\n        try {\n          const knownLength = await util.promisify(data.getLength).call(data);\n          Number.isFinite(knownLength) && knownLength >= 0 && headers.setContentLength(knownLength);\n          /*eslint no-empty:0*/\n        } catch (e) {\n        }\n      }\n    } else if (utils.isBlob(data) || utils.isFile(data)) {\n      data.size && headers.setContentType(data.type || 'application/octet-stream');\n      headers.setContentLength(data.size || 0);\n      data = stream.Readable.from(readBlob(data));\n    } else if (data && !utils.isStream(data)) {\n      if (Buffer.isBuffer(data)) {\n        // Nothing to do...\n      } else if (utils.isArrayBuffer(data)) {\n        data = Buffer.from(new Uint8Array(data));\n      } else if (utils.isString(data)) {\n        data = Buffer.from(data, 'utf-8');\n      } else {\n        return reject(new AxiosError(\n          'Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream',\n          AxiosError.ERR_BAD_REQUEST,\n          config\n        ));\n      }\n\n      // Add Content-Length header if data exists\n      headers.setContentLength(data.length, false);\n\n      if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {\n        return reject(new AxiosError(\n          'Request body larger than maxBodyLength limit',\n          AxiosError.ERR_BAD_REQUEST,\n          config\n        ));\n      }\n    }\n\n    const contentLength = utils.toFiniteNumber(headers.getContentLength());\n\n    if (utils.isArray(maxRate)) {\n      maxUploadRate = maxRate[0];\n      maxDownloadRate = maxRate[1];\n    } else {\n      maxUploadRate = maxDownloadRate = maxRate;\n    }\n\n    if (data && (onUploadProgress || maxUploadRate)) {\n      if (!utils.isStream(data)) {\n        data = stream.Readable.from(data, {objectMode: false});\n      }\n\n      data = stream.pipeline([data, new AxiosTransformStream({\n        maxRate: utils.toFiniteNumber(maxUploadRate)\n      })], utils.noop);\n\n      onUploadProgress && data.on('progress', flushOnFinish(\n        data,\n        progressEventDecorator(\n          contentLength,\n          progressEventReducer(asyncDecorator(onUploadProgress), false, 3)\n        )\n      ));\n    }\n\n    // HTTP basic authentication\n    let auth = undefined;\n    if (config.auth) {\n      const username = config.auth.username || '';\n      const password = config.auth.password || '';\n      auth = username + ':' + password;\n    }\n\n    if (!auth && parsed.username) {\n      const urlUsername = parsed.username;\n      const urlPassword = parsed.password;\n      auth = urlUsername + ':' + urlPassword;\n    }\n\n    auth && headers.delete('authorization');\n\n    let path;\n\n    try {\n      path = buildURL(\n        parsed.pathname + parsed.search,\n        config.params,\n        config.paramsSerializer\n      ).replace(/^\\?/, '');\n    } catch (err) {\n      const customErr = new Error(err.message);\n      customErr.config = config;\n      customErr.url = config.url;\n      customErr.exists = true;\n      return reject(customErr);\n    }\n\n    headers.set(\n      'Accept-Encoding',\n      'gzip, compress, deflate' + (isBrotliSupported ? ', br' : ''), false\n      );\n\n    const options = {\n      path,\n      method: method,\n      headers: headers.toJSON(),\n      agents: { http: config.httpAgent, https: config.httpsAgent },\n      auth,\n      protocol,\n      family,\n      beforeRedirect: dispatchBeforeRedirect,\n      beforeRedirects: {}\n    };\n\n    // cacheable-lookup integration hotfix\n    !utils.isUndefined(lookup) && (options.lookup = lookup);\n\n    if (config.socketPath) {\n      options.socketPath = config.socketPath;\n    } else {\n      options.hostname = parsed.hostname.startsWith(\"[\") ? parsed.hostname.slice(1, -1) : parsed.hostname;\n      options.port = parsed.port;\n      setProxy(options, config.proxy, protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path);\n    }\n\n    let transport;\n    const isHttpsRequest = isHttps.test(options.protocol);\n    options.agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;\n    if (config.transport) {\n      transport = config.transport;\n    } else if (config.maxRedirects === 0) {\n      transport = isHttpsRequest ? https : http;\n    } else {\n      if (config.maxRedirects) {\n        options.maxRedirects = config.maxRedirects;\n      }\n      if (config.beforeRedirect) {\n        options.beforeRedirects.config = config.beforeRedirect;\n      }\n      transport = isHttpsRequest ? httpsFollow : httpFollow;\n    }\n\n    if (config.maxBodyLength > -1) {\n      options.maxBodyLength = config.maxBodyLength;\n    } else {\n      // follow-redirects does not skip comparison, so it should always succeed for axios -1 unlimited\n      options.maxBodyLength = Infinity;\n    }\n\n    if (config.insecureHTTPParser) {\n      options.insecureHTTPParser = config.insecureHTTPParser;\n    }\n\n    // Create the request\n    req = transport.request(options, function handleResponse(res) {\n      if (req.destroyed) return;\n\n      const streams = [res];\n\n      const responseLength = +res.headers['content-length'];\n\n      if (onDownloadProgress || maxDownloadRate) {\n        const transformStream = new AxiosTransformStream({\n          maxRate: utils.toFiniteNumber(maxDownloadRate)\n        });\n\n        onDownloadProgress && transformStream.on('progress', flushOnFinish(\n          transformStream,\n          progressEventDecorator(\n            responseLength,\n            progressEventReducer(asyncDecorator(onDownloadProgress), true, 3)\n          )\n        ));\n\n        streams.push(transformStream);\n      }\n\n      // decompress the response body transparently if required\n      let responseStream = res;\n\n      // return the last request in case of redirects\n      const lastRequest = res.req || req;\n\n      // if decompress disabled we should not decompress\n      if (config.decompress !== false && res.headers['content-encoding']) {\n        // if no content, but headers still say that it is encoded,\n        // remove the header not confuse downstream operations\n        if (method === 'HEAD' || res.statusCode === 204) {\n          delete res.headers['content-encoding'];\n        }\n\n        switch ((res.headers['content-encoding'] || '').toLowerCase()) {\n        /*eslint default-case:0*/\n        case 'gzip':\n        case 'x-gzip':\n        case 'compress':\n        case 'x-compress':\n          // add the unzipper to the body stream processing pipeline\n          streams.push(zlib.createUnzip(zlibOptions));\n\n          // remove the content-encoding in order to not confuse downstream operations\n          delete res.headers['content-encoding'];\n          break;\n        case 'deflate':\n          streams.push(new ZlibHeaderTransformStream());\n\n          // add the unzipper to the body stream processing pipeline\n          streams.push(zlib.createUnzip(zlibOptions));\n\n          // remove the content-encoding in order to not confuse downstream operations\n          delete res.headers['content-encoding'];\n          break;\n        case 'br':\n          if (isBrotliSupported) {\n            streams.push(zlib.createBrotliDecompress(brotliOptions));\n            delete res.headers['content-encoding'];\n          }\n        }\n      }\n\n      responseStream = streams.length > 1 ? stream.pipeline(streams, utils.noop) : streams[0];\n\n      const offListeners = stream.finished(responseStream, () => {\n        offListeners();\n        onFinished();\n      });\n\n      const response = {\n        status: res.statusCode,\n        statusText: res.statusMessage,\n        headers: new AxiosHeaders(res.headers),\n        config,\n        request: lastRequest\n      };\n\n      if (responseType === 'stream') {\n        response.data = responseStream;\n        settle(resolve, reject, response);\n      } else {\n        const responseBuffer = [];\n        let totalResponseBytes = 0;\n\n        responseStream.on('data', function handleStreamData(chunk) {\n          responseBuffer.push(chunk);\n          totalResponseBytes += chunk.length;\n\n          // make sure the content length is not over the maxContentLength if specified\n          if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {\n            // stream.destroy() emit aborted event before calling reject() on Node.js v16\n            rejected = true;\n            responseStream.destroy();\n            reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded',\n              AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n          }\n        });\n\n        responseStream.on('aborted', function handlerStreamAborted() {\n          if (rejected) {\n            return;\n          }\n\n          const err = new AxiosError(\n            'stream has been aborted',\n            AxiosError.ERR_BAD_RESPONSE,\n            config,\n            lastRequest\n          );\n          responseStream.destroy(err);\n          reject(err);\n        });\n\n        responseStream.on('error', function handleStreamError(err) {\n          if (req.destroyed) return;\n          reject(AxiosError.from(err, null, config, lastRequest));\n        });\n\n        responseStream.on('end', function handleStreamEnd() {\n          try {\n            let responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);\n            if (responseType !== 'arraybuffer') {\n              responseData = responseData.toString(responseEncoding);\n              if (!responseEncoding || responseEncoding === 'utf8') {\n                responseData = utils.stripBOM(responseData);\n              }\n            }\n            response.data = responseData;\n          } catch (err) {\n            return reject(AxiosError.from(err, null, config, response.request, response));\n          }\n          settle(resolve, reject, response);\n        });\n      }\n\n      emitter.once('abort', err => {\n        if (!responseStream.destroyed) {\n          responseStream.emit('error', err);\n          responseStream.destroy();\n        }\n      });\n    });\n\n    emitter.once('abort', err => {\n      reject(err);\n      req.destroy(err);\n    });\n\n    // Handle errors\n    req.on('error', function handleRequestError(err) {\n      // @todo remove\n      // if (req.aborted && err.code !== AxiosError.ERR_FR_TOO_MANY_REDIRECTS) return;\n      reject(AxiosError.from(err, null, config, req));\n    });\n\n    // set tcp keep alive to prevent drop connection by peer\n    req.on('socket', function handleRequestSocket(socket) {\n      // default interval of sending ack packet is 1 minute\n      socket.setKeepAlive(true, 1000 * 60);\n    });\n\n    // Handle request timeout\n    if (config.timeout) {\n      // This is forcing a int timeout to avoid problems if the `req` interface doesn't handle other types.\n      const timeout = parseInt(config.timeout, 10);\n\n      if (Number.isNaN(timeout)) {\n        reject(new AxiosError(\n          'error trying to parse `config.timeout` to int',\n          AxiosError.ERR_BAD_OPTION_VALUE,\n          config,\n          req\n        ));\n\n        return;\n      }\n\n      // Sometime, the response will be very slow, and does not respond, the connect event will be block by event loop system.\n      // And timer callback will be fired, and abort() will be invoked before connection, then get \"socket hang up\" and code ECONNRESET.\n      // At this time, if we have a large number of request, nodejs will hang up some socket on background. and the number will up and up.\n      // And then these socket which be hang up will devouring CPU little by little.\n      // ClientRequest.setTimeout will be fired on the specify milliseconds, and can make sure that abort() will be fired after connect.\n      req.setTimeout(timeout, function handleRequestTimeout() {\n        if (isDone) return;\n        let timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';\n        const transitional = config.transitional || transitionalDefaults;\n        if (config.timeoutErrorMessage) {\n          timeoutErrorMessage = config.timeoutErrorMessage;\n        }\n        reject(new AxiosError(\n          timeoutErrorMessage,\n          transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED,\n          config,\n          req\n        ));\n        abort();\n      });\n    }\n\n\n    // Send the request\n    if (utils.isStream(data)) {\n      let ended = false;\n      let errored = false;\n\n      data.on('end', () => {\n        ended = true;\n      });\n\n      data.once('error', err => {\n        errored = true;\n        req.destroy(err);\n      });\n\n      data.on('close', () => {\n        if (!ended && !errored) {\n          abort(new CanceledError('Request stream has been aborted', config, req));\n        }\n      });\n\n      data.pipe(req);\n    } else {\n      req.end(data);\n    }\n  });\n}\n\nexport const __setProxy = setProxy;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}